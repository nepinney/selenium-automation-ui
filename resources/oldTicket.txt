package acquire.kotlin

import acquire.kotlin.exception.InvalidNotesException

/**
 * @Author Nicholas Pinney
 */
class Ticket (private val notes: String,
              val incNumber: String) {

    /**
     * tscNumber
     */
    val tscNumber = notes.slice(notes.indexOf("Order number : ") + "Order number : ".length until notes.indexOf('\n', notes.indexOf("Order number : "))).trim()

    /**
     * ownerName
     */
    val ownerName = notes.slice(notes.indexOf("Owner\n")+"Owner\n".length until notes.indexOf("\tEmail", notes.indexOf("Owner\n"))).trim()

    private val modelAndSerialNumber = let {
        val indexOfStringOne = notes.indexOf("Computer Name or Serial #")
        val indexRightBeforeModel = notes.indexOf(":", indexOfStringOne)
        notes.slice(indexRightBeforeModel+1
                        until
                        notes.indexOf("(Return"))
                .trim()
    }

    private fun getSerialNumberPrefix(): String {
        return when (true) {
            modelAndSerialNumber.contains("MXL") -> { "MXL" }
            modelAndSerialNumber.contains("2UA") -> { "2UA" }
            modelAndSerialNumber.contains("5CG") -> { "5CG" }
            else -> { "Unknown" }
        }
    }

    /**
     * deviceType
     */
    val deviceType = when (getSerialNumberPrefix()) {
        "MXL" -> { "Desktop" }
        "2UA" -> { "Desktop" }
        "5CG" -> { "Laptop" }
        else -> { "Unknown" }
    }

    /**
     * serialNumber
     */
    val serialNumber =
        if (getSerialNumberPrefix() != "Unknown")
            modelAndSerialNumber.slice(modelAndSerialNumber.indexOf(getSerialNumberPrefix()) .. modelAndSerialNumber.lastIndex)
        else
            "Unknown"

    /**
     * model
     */
    val deviceModel =
        if ((modelAndSerialNumber.slice(0 until modelAndSerialNumber.indexOf(serialNumber))).isBlank())
        ""
        else
            modelAndSerialNumber.slice(0 until modelAndSerialNumber.indexOf(serialNumber))

    /**
     * quantityInstructions
     */
    val quantityInstructions = notes.slice(
        notes.indexOf("Please enter the quantities for each computers, peripherals, accessories and devices to be returned")
                +"Please enter the quantities for each computers, peripherals, accessories and devices to be returned".length
                until
                notes.indexOf("\nPlease validate")).trim()

    /**
     * clientToUpdateAndValidate
     */
    val clientToUpdateAndValidate = notes.slice(
        notes.indexOf("Please validate and update")+"Please validate and update".length
            until
            notes.indexOf("Exact location")).trim()

    /**
     * exactLocation
     */
    val exactLocation = notes.slice(
        notes.indexOf("Exact location: suite, room, section, column, cubicle, extension, etc.")+"Exact location: suite, room, section, column, cubicle, extension, etc.".length
                until
                notes.indexOf("Configuration", notes.indexOf("Exact location: suite, room, section, column, cubicle, extension, etc."))).trim()

    /**
     * requstorEmail
     * Watch: the missing space after the colon of "Emial :()" indicated by the brackets could cause problem. Removed them because first letter of emial was being
     * chopped off. We'll see if this adds problems for other texts.
     */
    val requestorEmail = notes.slice(
        notes.indexOf("Email :") +" Email :".length
            until
                notes.indexOf("Telephone")).trim()

    /**
     * primaryEmail
     */
    val primaryEmail = let {
        val primaryContact = notes.slice(
            notes.indexOf("Primary (on-site)")
                    until //-> could throw index out of bounds exception start -1 if .. instead of until
                    notes.indexOf("\nSecondary")
        )
        primaryContact.slice(primaryContact.lastIndexOf('-')+2 until primaryContact.length)
    }

    /**
     * secondaryEmail
     */
    val secondaryEmail = let {
        val preSecondary = "Secondary (on-site)"
        val secondaryContact = notes.slice(
            notes.indexOf(preSecondary)+preSecondary.length
                    until //-> could throw index out of bounds exception start -1 if .. instead of until
                    notes.indexOf("\nBilling", notes.indexOf(preSecondary)))
        secondaryContact.slice(secondaryContact.lastIndexOf('-')+2 until secondaryContact.length).trim()
    }

    /*
    For address extraction, the below functions have been created
     */
    val attentionTo = clientToUpdateAndValidate.slice(0..clientToUpdateAndValidate.indexOf('\n')).trim()

    val streetNumber = let {
        val streetNumberEndIndex = clientToUpdateAndValidate.indexOf(' ', clientToUpdateAndValidate.indexOf('\n'))
        clientToUpdateAndValidate.slice(clientToUpdateAndValidate.indexOf('\n')..streetNumberEndIndex).trim()
    }

    val streetName = let {
        val streetNumberEndIndex = clientToUpdateAndValidate.indexOf(' ', clientToUpdateAndValidate.indexOf('\n'))
        val streetNameEndIndex = clientToUpdateAndValidate.indexOf('-', streetNumberEndIndex)
        clientToUpdateAndValidate.slice(streetNumberEndIndex until streetNameEndIndex).trim()
    }

    /*
    The may be floor number in between these two elements of the client to update and validate
     */

    val city = let {
        val streetNameEndIndex = clientToUpdateAndValidate.indexOf('\n', clientToUpdateAndValidate.indexOf(streetNumber))
        val cityNameEndIndex = clientToUpdateAndValidate.indexOf('-', streetNameEndIndex)
        clientToUpdateAndValidate.slice(streetNameEndIndex until cityNameEndIndex).trim()
    }

    val postalCode = let {
        val cityEndIndex = clientToUpdateAndValidate.indexOf('-', clientToUpdateAndValidate.indexOf(city))
        val provinceEndIndex = clientToUpdateAndValidate.indexOf(' ', cityEndIndex + 3)
        val postalCodeEndIndex = clientToUpdateAndValidate.lastIndex
        clientToUpdateAndValidate.slice(provinceEndIndex..postalCodeEndIndex).trim()
    }


    fun validUniqueEmailAddresses(): List<String?> {
        val uniqueAddresses = listOf(requestorEmail, primaryEmail, secondaryEmail).distinct()
        /*for (address in uniqueAddresses) {
            try {
                MailAddress(address)
                uniqueValidAddresses.add(address)
            }
            catch (e: FormatException) {
                println("$address: not a real address")
            }
        }*/
        return uniqueAddresses//.filter { !it.contains("@") }
    }

    fun printInfo() {
        println("\n\n------------------------------------------")
        println("tsc: $tscNumber")
        println("Owner: $ownerName")
        println("Req: $requestorEmail")
        println("Primary: $primaryEmail")
        println("Secondary: $secondaryEmail")
        println("Model: $deviceModel")
        //println("Model & SN: $modelAndSerialNumber")
        println("SN: $serialNumber")
        println("---------\nClient to update and validate: ${"\n\t" + clientToUpdateAndValidate.replace("\n", "\n\t")}")
        println("---------\nQuantity/Instructions: $quantityInstructions")
        println("---------\nExact location: ${exactLocation.replace("\n", "\t\n")}")
    }

    init {
        if (notes.isBlank())
            throw InvalidNotesException()
    }
}

